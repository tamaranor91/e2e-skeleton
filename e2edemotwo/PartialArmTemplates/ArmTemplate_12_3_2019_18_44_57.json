{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "e2edemotwo"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "outputDataSet",
						"container": "democontainertwo"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "County",
						"type": "UTF8"
					},
					{
						"name": "Year",
						"type": "UTF8"
					},
					{
						"name": "Population",
						"type": "INT64"
					},
					{
						"name": "IndexCount",
						"type": "UTF8"
					},
					{
						"name": "IndexRate",
						"type": "UTF8"
					},
					{
						"name": "FirearmCount",
						"type": "UTF8"
					},
					{
						"name": "FirearmRate",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "outputDataSet",
						"container": "democontainertwo"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "County",
						"type": "UTF8"
					},
					{
						"name": "Year",
						"type": "UTF8"
					},
					{
						"name": "Population",
						"type": "INT64"
					},
					{
						"name": "IndexCount",
						"type": "UTF8"
					},
					{
						"name": "IndexRate",
						"type": "UTF8"
					},
					{
						"name": "FirearmCount",
						"type": "UTF8"
					},
					{
						"name": "FirearmRate",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "inputDataSet",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "\n\nsource(output(\n\t\tCounty as string,\n\t\tYear as string,\n\t\tPopulation as string,\n\t\t{Index Count} as string,\n\t\t{Index Rate} as string,\n\t\t{Violent Count} as string,\n\t\t{Violent Rate} as string,\n\t\t{Property Count} as string,\n\t\t{Property Rate} as string,\n\t\t{Firearm Count} as string,\n\t\t{Firearm Rate} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> source1\nsource1 filter(County=='Broome' || County=='Erie') ~> Filter1\nFilter1 sort(asc(Year, true)) ~> Sort1\nSort1 derive({derived column} = {Index Count}+{Violent Count}) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\tCounty as string,\n\t\tYear as string,\n\t\tPopulation as long,\n\t\tIndexCount as string,\n\t\tIndexRate as string,\n\t\tFirearmCount as string,\n\t\tFirearmRate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['convertedParquet.parquet'],\n\tmapColumn(\n\t\tCounty,\n\t\tYear,\n\t\tPopulation\n\t),\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Parquet2')]"
			]
		}
	]
}